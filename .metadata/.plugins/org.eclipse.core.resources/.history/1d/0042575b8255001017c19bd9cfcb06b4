package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement; // userId를 얻기 위해 Statement 필요
import java.time.LocalDateTime; // LocalDateTime 매핑용

import model.User;
import util.DBUtil; // DB 연결 유틸리티 임포트

public class UserDao {

    /**
     * 새로운 사용자를 데이터베이스에 추가합니다.
     * @param user 추가할 사용자 정보 객체 (password는 이미 해싱된 상태여야 함)
     * @return 데이터베이스에 저장된 사용자 정보 (user_id 포함) 또는 null (실패 시)
     * @throws SQLException 데이터베이스 작업 중 오류 발생 시
     */
    public User createUser(User user) throws SQLException {
        String sql = "INSERT INTO Users (username, password, nickname, email, gender, mbti, reg_date) VALUES (?, ?, ?, ?, ?, ?, NOW())";
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null; // 자동 생성된 키를 받기 위한 ResultSet

        try {
            conn = DBUtil.getConnection();
            // Statement.RETURN_GENERATED_KEYS를 사용하여 자동 생성된 user_id를 받을 수 있게 설정
            pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            pstmt.setString(1, user.getUsername());
            pstmt.setString(2, user.getPassword());
            pstmt.setString(3, user.getNickname());
            pstmt.setString(4, user.getEmail());
            pstmt.setString(5, user.getGender());
            pstmt.setString(6, user.getMbti());

            int affectedRows = pstmt.executeUpdate(); // 쿼리 실행

            if (affectedRows > 0) {
                rs = pstmt.getGeneratedKeys(); // 생성된 키를 가져옴
                if (rs.next()) {
                    user.setUserId(rs.getInt(1)); // 첫 번째 컬럼 (user_id)을 가져옴
                    user.setRegDate(LocalDateTime.now()); // 현재 시간으로 등록일 설정 (DB에서도 NOW()로 설정되므로 동기화)
                    // last_login_date는 초기 null 또는 기본값
                    return user; // 생성된 user_id가 포함된 User 객체 반환
                }
            }
            return null; // 사용자 생성 실패 시
        } finally {
            DBUtil.close(rs);
            DBUtil.close(pstmt);
            DBUtil.close(conn);
        }
    }

    /**
     * 사용자 이름으로 사용자를 조회합니다. (로그인 및 중복 확인용)
     * @param username 조회할 사용자 이름
     * @return 해당 사용자 객체 또는 null (사용자가 없는 경우)
     * @throws SQLException 데이터베이스 작업 중 오류 발생 시
     */
    public User findByUsername(String username) throws SQLException {
        String sql = "SELECT user_id, username, password, nickname, email, gender, mbti, reg_date, last_login_date FROM Users WHERE username = ?";
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        User user = null;

        try {
            conn = DBUtil.getConnection();
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, username);
            rs = pstmt.executeQuery();

            if (rs.next()) {
                user = new User();
                user.setUserId(rs.getInt("user_id"));
                user.setUsername(rs.getString("username"));
                user.setPassword(rs.getString("password"));
                user.setNickname(rs.getString("nickname"));
                user.setEmail(rs.getString("email"));
                user.setGender(rs.getString("gender"));
                user.setMbti(rs.getString("mbti"));
                // SQL TIMESTAMP/DATETIME을 LocalDateTime으로 변환
                // rs.getTimestamp()가 null을 반환할 수 있으므로 null 체크 필요
                user.setRegDate(rs.getTimestamp("reg_date") != null ? rs.getTimestamp("reg_date").toLocalDateTime() : null);
                user.setLastLoginDate(rs.getTimestamp("last_login_date") != null ? rs.getTimestamp("last_login_date").toLocalDateTime() : null);
            }
            return user;
        } finally {
            DBUtil.close(rs);
            DBUtil.close(pstmt);
            DBUtil.close(conn);
        }
    }

    /**
     * 이메일로 사용자를 조회합니다. (중복 확인용)
     * @param email 조회할 이메일
     * @return 이메일이 존재하는지 여부
     * @throws SQLException 데이터베이스 작업 중 오류 발생 시
     */
    public boolean isEmailTaken(String email) throws SQLException {
        String sql = "SELECT COUNT(*) FROM Users WHERE email = ?";
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = DBUtil.getConnection();
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, email);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
            return false;
        } finally {
            DBUtil.close(rs);
            DBUtil.close(pstmt);
            DBUtil.close(conn);
        }
    }

    /**
     * 사용자 이름(username)이 이미 사용 중인지 확인합니다. (중복 확인용)
     * @param username 확인할 사용자 이름
     * @return 사용자 이름이 이미 사용 중이면 true, 아니면 false
     * @throws SQLException 데이터베이스 작업 중 오류 발생 시
     */
    public boolean isUsernameTaken(String username) throws SQLException {
        String sql = "SELECT COUNT(*) FROM Users WHERE username = ?";
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = DBUtil.getConnection();
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, username);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
            return false;
        } finally {
            DBUtil.close(rs);
            DBUtil.close(pstmt);
            DBUtil.close(conn);
        }
    }

    /**
     * 닉네임이 이미 사용 중인지 확인합니다. (중복 확인용)
     * @param nickname 확인할 닉네임
     * @return 닉네임이 이미 사용 중이면 true, 아니면 false
     * @throws SQLException 데이터베이스 작업 중 오류 발생 시
     */
    public boolean isNicknameTaken(String nickname) throws SQLException {
        String sql = "SELECT COUNT(*) FROM Users WHERE nickname = ?";
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = DBUtil.getConnection();
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, nickname);
            rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
            return false;
        } finally {
            DBUtil.close(rs);
            DBUtil.close(pstmt);
            DBUtil.close(conn);
        }
    }

    /**
     * 사용자 로그인 시간 업데이트
     * @param userId 로그인한 사용자 ID
     * @throws SQLException 데이터베이스 작업 중 오류 발생 시
     */
    public void updateLastLoginDate(int userId) throws SQLException {
        String sql = "UPDATE Users SET last_login_date = NOW() WHERE user_id = ?";
        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            conn = DBUtil.getConnection();
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, userId);
            pstmt.executeUpdate();
        } finally {
            DBUtil.close(pstmt);
            DBUtil.close(conn);
        }
    }