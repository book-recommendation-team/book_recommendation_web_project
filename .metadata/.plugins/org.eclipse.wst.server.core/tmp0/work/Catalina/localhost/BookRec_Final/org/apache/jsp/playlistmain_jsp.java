/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2025-07-09 04:31:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import model.User;
import model.User;

public final class playlistmain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1751616556000L));
    _jspx_dependants.put("jar:file:/C:/teamproject_0708/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/BookRec_Final/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
    _jspx_dependants.put("/css/main_css.jsp", Long.valueOf(1751947096000L));
    _jspx_dependants.put("/header.jsp", Long.valueOf(1751950996000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("model.User");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fotherwise;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fotherwise = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
    _005fjspx_005ftagPool_005fc_005fotherwise.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write(' ');
      out.write('\r');
      out.write('\n');

    // [추가] 페이지에서 사용할 변수들을 선언합니다.
    User loggedInUser = (User) session.getAttribute("loggedInUser");
    String contextPath = request.getContextPath();

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./css/celebList.css\" /> ");
      out.write('\r');
      out.write('\n');
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<style>\n");
      out.write("  /* 기본 스타일 (기존 유지) */\n");
      out.write("body {\n");
      out.write("    font-family: 'Arial', sans-serif;\n");
      out.write("    margin: 0;\n");
      out.write("    padding: 0;\n");
      out.write("    background-color: #fff;\n");
      out.write("}\n");
      out.write("\n");
      out.write("header {\n");
      out.write("    display: flex;\n");
      out.write("    justify-content: space-between;\n");
      out.write("    align-items: center;\n");
      out.write("    background-color: #eff7e8;\n");
      out.write("    padding: 0px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#logo img {\n");
      out.write("    width: 200px;\n");
      out.write("    height: auto;\n");
      out.write("    margin-left: 150px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#logo a img {\n");
      out.write("    cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".search-form { /* CSS 클래스 이름 수정 */\n");
      out.write("  display: flex;\n");
      out.write("  justify-content: center;\n");
      out.write("  align-items: center;\n");
      out.write("  gap: 10px;\n");
      out.write("  margin: 10px 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#search-box {\n");
      out.write("  padding: 10px;\n");
      out.write("  width: 400px;\n");
      out.write("  font-size: 16px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#search-btn {\n");
      out.write("  padding: 10px 16px;\n");
      out.write("  background-color: #446b3c;\n");
      out.write("  color: white;\n");
      out.write("  border: none;\n");
      out.write("  font-size: 16px;\n");
      out.write("  border-radius: 4px;\n");
      out.write("  cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("#search-btn:hover {\n");
      out.write("    background-color: #cce0b8;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* ======================================================== */\n");
      out.write("/* [수정된 부분 시작] 기존 버튼 스타일을 아래 코드로 대체합니다. */\n");
      out.write("/* ======================================================== */\n");
      out.write("\n");
      out.write("/* 회원가입, 로그인 등 기본 버튼 스타일 */\n");
      out.write("#user-buttons button {\n");
      out.write("    display: inline-block;\n");
      out.write("    width: 110px;\n");
      out.write("    height: 42px;\n");
      out.write("    line-height: 42px;\n");
      out.write("    text-align: center;\n");
      out.write("    vertical-align: middle;\n");
      out.write("    white-space: nowrap;\n");
      out.write("    \n");
      out.write("    background-color: #e6f0d7;\n");
      out.write("    color: #446b3c;\n");
      out.write("    border: 1px solid #c0dab0;\n");
      out.write("    border-radius: 4px;\n");
      out.write("    \n");
      out.write("    font-weight: bold;\n");
      out.write("    font-size: 14px;\n");
      out.write("    cursor: pointer;\n");
      out.write("    box-sizing: border-box;\n");
      out.write("    transition: background-color 0.2s;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 마이페이지, 로그아웃 링크를 버튼처럼 보이게 하는 스타일 */\n");
      out.write(".header-action-btn {\n");
      out.write("    display: inline-block;\n");
      out.write("    width: 110px;\n");
      out.write("    height: 42px;\n");
      out.write("    line-height: 42px;\n");
      out.write("    text-align: center;\n");
      out.write("    vertical-align: middle;\n");
      out.write("    white-space: nowrap;\n");
      out.write("    \n");
      out.write("    background-color: #e6f0d7;\n");
      out.write("    color: #446b3c;\n");
      out.write("    border: 1px solid #c0dab0;\n");
      out.write("    border-radius: 4px;\n");
      out.write("    \n");
      out.write("    font-weight: bold;\n");
      out.write("    font-size: 14px;\n");
      out.write("    text-decoration: none; /* a 태그 밑줄 제거 */\n");
      out.write("    cursor: pointer;\n");
      out.write("    box-sizing: border-box;\n");
      out.write("    transition: background-color 0.2s;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 모든 버튼에 동일한 hover 효과 적용 */\n");
      out.write("#user-buttons button:hover,\n");
      out.write(".header-action-btn:hover {\n");
      out.write("    background-color: #d0e6c5;\n");
      out.write("    border-color: #a9c7a7;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 환영 메시지 텍스트 세로 정렬 */\n");
      out.write(".welcome-message {\n");
      out.write("    vertical-align: middle;\n");
      out.write("    margin-right: 10px;\n");
      out.write("    font-weight: bold;\n");
      out.write("    color: #446b3c;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* ======================================================== */\n");
      out.write("/* [수정된 부분 끝]                                        */\n");
      out.write("/* ======================================================== */\n");
      out.write("\n");
      out.write("nav {\n");
      out.write("    background-color: #e6f0d7;\n");
      out.write("    text-align: center;\n");
      out.write("    padding: 15px 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write("nav a {\n");
      out.write("    text-decoration: none;\n");
      out.write("    margin: 0 40px;\n");
      out.write("    color: #000;\n");
      out.write("    font-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write("nav a:hover {\n");
      out.write("    text-decoration: underline;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#user-buttons {\n");
      out.write("    display: flex;\n");
      out.write("    align-items: center; /* 버튼과 텍스트 세로 정렬을 위해 추가 */\n");
      out.write("    gap: 10px;\n");
      out.write("    margin-right: 150px;\n");
      out.write("} \n");
      out.write(".banner {\n");
      out.write("    position: relative;\n");
      out.write("    width: 100%;\n");
      out.write("    height: 650px;\n");
      out.write("    overflow: hidden;\n");
      out.write("      background-color: transparent;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".banner img {\n");
      out.write("    position: absolute;\n");
      out.write("    top: 0;\n");
      out.write("    left: 0;\n");
      out.write("    width: 100%;\n");
      out.write("    height: 100%;\n");
      out.write("    object-fit: cover;\n");
      out.write("    object-position: center center;\n");
      out.write("    z-index: 1;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".banner-controls {\n");
      out.write("    position: absolute;\n");
      out.write("    bottom: 10px;\n");
      out.write("    right: 10px;\n");
      out.write("    z-index: 3;\n");
      out.write("    display: flex;\n");
      out.write("    gap: 6px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".banner-controls button {\n");
      out.write("    background-color: rgba(255, 193, 7, 0.9);\n");
      out.write("    border: none;\n");
      out.write("    padding: 6px 8px;\n");
      out.write("    font-size: 14px;\n");
      out.write("    border-radius: 5px;\n");
      out.write("    cursor: pointer;\n");
      out.write("    color: #000;\n");
      out.write("    transition: background-color 0.3s ease;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".banner-controls button:hover {\n");
      out.write("    background-color: rgba(255, 160, 0, 0.95);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".section-title {\n");
      out.write("    background-color: #e6f0d7;\n");
      out.write("    display: flex;\n");
      out.write("    justify-content: center;\n");
      out.write("    flex-wrap: wrap;\n");
      out.write("    gap: 34px;\n");
      out.write("    padding: 18px 0;\n");
      out.write("     width: 100%;        /* ✅ 추가 */\n");
      out.write("    margin: 8px 0;      /* ✅ 가운데 정렬 제거 */\n");
      out.write("}\n");
      out.write("\n");
      out.write(".section-title a {\n");
      out.write("    text-decoration: none;\n");
      out.write("    margin: 0 20px;\n");
      out.write("    color: #000;\n");
      out.write("    font-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".section-title a:hover {\n");
      out.write("    text-decoration: underline;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".main_list {\n");
      out.write("    padding: 20px;\n");
      out.write("    text-align: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write(" .tag-list {\n");
      out.write("    display: flex;\n");
      out.write("    justify-content: center;\n");
      out.write("    flex-wrap: wrap;\n");
      out.write("    gap: 12px;\n");
      out.write("    margin: 20px 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".tag-button {\n");
      out.write("    background-color: #e6f0d7; /* 기본 연그린 */\n");
      out.write("    border: 1px solid transparent;\n");
      out.write("    padding: 8px 16px;\n");
      out.write("    border-radius: 20px;\n");
      out.write("    font-size: 14px;\n");
      out.write("    color: #446b3c; /* 그린 계열 텍스트 */\n");
      out.write("    cursor: pointer;\n");
      out.write("    font-weight: 600;\n");
      out.write("    transition: background-color 0.3s, color 0.3s, border 0.3s;\n");
      out.write("    outline: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".tag-button:hover {\n");
      out.write("    background-color: #d0e6c5;             /* hover 시 약간 더 진한 그린 */\n");
      out.write("    color: #2e4f25;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".tag-button.active {\n");
      out.write("    background-color: #c0dab0;             /* 클릭됐을 때 조금 더 강조 */\n");
      out.write("    border: 1px solid #8cb78a;             /* 테두리도 자연스러운 초록 */\n");
      out.write("    color: #2e4f25;                        /* 글자도 어울리는 진한 그린 */\n");
      out.write("}\n");
      out.write("\n");
      out.write(".tag-button:focus {\n");
      out.write("    outline: none;\n");
      out.write("    box-shadow: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 책 슬라이더 스타일 */\n");
      out.write(".book-carousel {\n");
      out.write("    position: relative;\n");
      out.write("    max-width: 1000px;\n");
      out.write("    margin: 0 auto 40px auto;\n");
      out.write("    overflow: hidden;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".carousel-window {\n");
      out.write("    width: 1000px;\n");
      out.write("    overflow: hidden;\n");
      out.write("    margin: 0 auto;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".carousel-track {\n");
      out.write("    display: flex;\n");
      out.write("    transition: transform 0.5s ease;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 이전/다음 버튼 - 위치 고정, 색상 조정 */\n");
      out.write(".carousel-btn {\n");
      out.write("    position: absolute;\n");
      out.write("    top: 50%;\n");
      out.write("    transform: translateY(-50%);\n");
      out.write("    font-size: 26px;\n");
      out.write("    background-color: #f3f8ef;\n");
      out.write("    border: none;\n");
      out.write("    color: #444;\n");
      out.write("    cursor: pointer;\n");
      out.write("    padding: 8px 12px;\n");
      out.write("    border-radius: 50%;\n");
      out.write("    z-index: 2;\n");
      out.write("    display: flex;\n");
      out.write("    align-items: center;\n");
      out.write("    justify-content: center;\n");
      out.write("    transition: background-color 0.3s, color 0.3s;\n");
      out.write("    user-select: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".carousel-btn:hover {\n");
      out.write("    background-color: #c8dfb5;\n");
      out.write("    color: #000;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".carousel-btn.prev {\n");
      out.write("    left: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".carousel-btn.next {\n");
      out.write("    right: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".book-item {\n");
      out.write("    flex: 0 0 25%;\n");
      out.write("    text-align: center;\n");
      out.write("    padding: 10px;\n");
      out.write("    box-sizing: border-box;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".book-item img {\n");
      out.write("    width: 180px;\n");
      out.write("    height: 260px;\n");
      out.write("    object-fit: cover;\n");
      out.write("    border-radius: 6px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".book-info {\n");
      out.write("    margin-top: 8px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".book-title {\n");
      out.write("    font-size: 14px;\n");
      out.write("    font-weight: bold;\n");
      out.write("    margin-top: 10px;\n");
      out.write("    color: #444;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".book-author {\n");
      out.write("    font-size: 12px;\n");
      out.write("    color: #666;\n");
      out.write("}\n");
      out.write("\n");
      out.write("footer {\n");
      out.write("    background-color: #eff7e8;\n");
      out.write("    color: #333;\n");
      out.write("    padding: 20px 0;\n");
      out.write("    text-align: center;\n");
      out.write("    font-size: 14px;\n");
      out.write("    border-top: 1px solid #ccc;\n");
      out.write("    margin-top: 60px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".footer-container {\n");
      out.write("    max-width: 1000px;\n");
      out.write("    margin: 0 auto;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".footer-links a {\n");
      out.write("    color: #333;\n");
      out.write("    text-decoration: none;\n");
      out.write("    margin: 0 8px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".footer-links a:hover {\n");
      out.write("    text-decoration: underline;\n");
      out.write("}\n");
      out.write("\n");
      out.write(" /* 이전/다음 버튼 스타일 */\n");
      out.write("#carousel-prev-btn, #carousel-next-btn {\n");
      out.write("    font-size: 18px;\n");
      out.write("    padding: 5px 12px;\n");
      out.write("    margin: 10px 5px 20px 5px;\n");
      out.write("    cursor: pointer;\n");
      out.write("    border: 1px solid #446b3c;\n");
      out.write("    background: white;\n");
      out.write("    color: #446b3c;\n");
      out.write("    border-radius: 4px;\n");
      out.write("}\n");
      out.write("#carousel-prev-btn:hover, #carousel-next-btn:hover {\n");
      out.write("    background-color: #446b3c;\n");
      out.write("    color: white;\n");
      out.write("}\n");
      out.write("#scrollToTopBtn {\n");
      out.write("  position: fixed;\n");
      out.write("  bottom: 150px;\n");
      out.write("  right: 40px;\n");
      out.write("  width: 66px; /* 이미지와 딱 맞게 약간 키움 */\n");
      out.write("  height: 66px;\n");
      out.write("  background-color: transparent;\n");
      out.write("  border: none;\n");
      out.write("  border-radius: 0;\n");
      out.write("  transform: rotate(45deg);\n");
      out.write("  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15); /* 그림자 더 작고 약하게 */\n");
      out.write("  cursor: pointer;\n");
      out.write("  display: flex;\n");
      out.write("  justify-content: center;\n");
      out.write("  align-items: center;\n");
      out.write("  z-index: 999;\n");
      out.write("  transition: all 0.3s ease;\n");
      out.write("  backdrop-filter: blur(10px);\n");
      out.write("  padding: 0;\n");
      out.write("  margin-top: 0px; /* margin-top 제거 또는 0으로 */\n");
      out.write("}\n");
      out.write("\n");
      out.write("#scrollToTopBtn img {\n");
      out.write("  width: 100%;\n");
      out.write("  height: 100%;\n");
      out.write("  object-fit: contain;\n");
      out.write("  transform: rotate(-45deg);\n");
      out.write("  display: block;\n");
      out.write("  transition: transform 0.3s ease;\n");
      out.write("  position: relative;\n");
      out.write("  top: 0;\n");
      out.write("  left: 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#scrollToTopBtn:hover {\n");
      out.write("  transform: rotate(45deg) translateY(2px); /* 움직임도 줄임 */\n");
      out.write("  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.2); /* 호버시 그림자도 작게 */\n");
      out.write("}\n");
      out.write("\n");
      out.write("#scrollToTopBtn:hover img {\n");
      out.write("  transform: scale(1.05) rotate(-45deg);\n");
      out.write("}\n");
      out.write("\n");
      out.write("</style>\n");
      out.write(' ');
      out.write("\r\n");
      out.write("<link rel=\"icon\" href=\"img/icon2.png\" type=\"image/x-icon\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>플레이리스트</title>\r\n");
      out.write("<style>\r\n");
      out.write("/* 기존 celebList.css에 정의된 스타일이 여기에 복사되지 않도록 주의하세요. */\r\n");
      out.write("/* 아래 스타일은 celebList.css에 추가되거나, 해당 파일에서 정의되어 있어야 합니다. */\r\n");
      out.write("\r\n");
      out.write("/* === 새로 추가될 또는 확인해야 할 CSS === */\r\n");
      out.write(".action-buttons {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: flex-end;\r\n");
      out.write("    gap: 10px;\r\n");
      out.write("    margin-bottom: 20px;\r\n");
      out.write("}\r\n");
      out.write(".action-buttons button, .action-buttons a {\r\n");
      out.write("    padding: 10px 16px;\r\n");
      out.write("    background-color: #e6f0d7;\r\n");
      out.write("    color: black;\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 8px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    transition: background-color 0.2s ease;\r\n");
      out.write("}\r\n");
      out.write(".action-buttons button:hover, .action-buttons a:hover {\r\n");
      out.write("    background-color: #cce0b8;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 개별 카드 내 삭제 버튼 스타일 */\r\n");
      out.write(".card-actions {\r\n");
      out.write("    position: absolute;\r\n");
      out.write("    top: 10px;\r\n");
      out.write("    right: 10px;\r\n");
      out.write("    z-index: 10;\r\n");
      out.write("    opacity: 0;\r\n");
      out.write("    visibility: hidden;\r\n");
      out.write("    transition: opacity 0.3s ease, visibility 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write(".card-actions .delete-btn {\r\n");
      out.write("    background-color: rgba(255, 0, 0, 0.7);\r\n");
      out.write("    color: white;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    padding: 5px 8px;\r\n");
      out.write("    font-size: 0.8em;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    transition: background-color 0.2s ease;\r\n");
      out.write("}\r\n");
      out.write(".card-actions .delete-btn:hover {\r\n");
      out.write("    background-color: rgba(255, 0, 0, 0.9);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* '선택 삭제' 모드일 때 개별 삭제 버튼 표시 */\r\n");
      out.write("body.delete-mode-active .card-actions {\r\n");
      out.write("    opacity: 1;\r\n");
      out.write("    visibility: visible;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 카드 사라지는 애니메이션 - 레이아웃 깜빡임 방지 */\r\n");
      out.write(".fade-out {\r\n");
      out.write("    opacity: 0;\r\n");
      out.write("    transform: translateY(30px);\r\n");
      out.write("    transition: opacity 1.2s cubic-bezier(0.4, 0.0, 0.2, 1), transform 1.2s cubic-bezier(0.4, 0.0, 0.2, 1);\r\n");
      out.write("    pointer-events: none; /* 클릭 방지 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 카드가 사라지는 동안 높이 유지 */\r\n");
      out.write(".fade-out-shrink {\r\n");
      out.write("    height: 0;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("    border: none;\r\n");
      out.write("    overflow: hidden;\r\n");
      out.write("    transition: height 0.3s ease-out, margin 0.3s ease-out, padding 0.3s ease-out;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".celeb-card-container {\r\n");
      out.write("    position: relative;	\r\n");
      out.write("    background-color: #fcfcfc;\r\n");
      out.write("    border: 1px solid #e0e0e0;\r\n");
      out.write("    border-radius: 8px;\r\n");
      out.write("    overflow: hidden;\r\n");
      out.write("    box-shadow: 0 2px 5px rgba(0,0,0,0.05);\r\n");
      out.write("    display: flex;\r\n");
      out.write("    flex-direction: column;\r\n");
      out.write("    transition: transform 0.2s ease-in-out, opacity 0.5s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".celeb-card-container:hover {\r\n");
      out.write("    transform: translateY(-5px);\r\n");
      out.write("    box-shadow: 0 4px 10px rgba(0,0,0,0.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".card {\r\n");
      out.write("    text-decoration: none;\r\n");
      out.write("    color: inherit;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    flex-direction: column;\r\n");
      out.write("    flex-grow: 1;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".card img {\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    height: 280px;\r\n");
      out.write("    object-fit: cover;\r\n");
      out.write("    border-bottom: 1px solid #eee;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 이미지 로딩 실패 시 대체 스타일 */\r\n");
      out.write(".card img[src=\"\"], .card img:not([src]), .card img[src*=\"null\"], .card img:not([src]):not(.loaded) {\r\n");
      out.write("    background-color: #f5f5f5;\r\n");
      out.write("    background-image: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\" viewBox=\"0 0 100 100\"><rect width=\"100\" height=\"100\" fill=\"%23f5f5f5\"/><text x=\"50%\" y=\"50%\" text-anchor=\"middle\" dy=\"0.35em\" font-family=\"Arial, sans-serif\" font-size=\"12\" fill=\"%23999\">이미지 없음</text></svg>');\r\n");
      out.write("    background-repeat: no-repeat;\r\n");
      out.write("    background-position: center;\r\n");
      out.write("    background-size: 100px 100px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".card-content {\r\n");
      out.write("    padding: 15px;\r\n");
      out.write("    text-align: left;\r\n");
      out.write("    flex-grow: 1;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    flex-direction: column;\r\n");
      out.write("    justify-content: space-between;\r\n");
      out.write("}\r\n");
      out.write(".card-title {\r\n");
      out.write("    font-size: 1.2em;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    color: #444;\r\n");
      out.write("    margin-bottom: 8px;\r\n");
      out.write("    white-space: nowrap;\r\n");
      out.write("    overflow: hidden;\r\n");
      out.write("    text-overflow: ellipsis;\r\n");
      out.write("}\r\n");
      out.write(".card-desc {\r\n");
      out.write("    font-size: 0.9em;\r\n");
      out.write("    color: #666;\r\n");
      out.write("    line-height: 1.4;\r\n");
      out.write("    overflow: hidden;\r\n");
      out.write("    text-overflow: ellipsis;\r\n");
      out.write("    display: -webkit-box;\r\n");
      out.write("    -webkit-line-clamp: 3;\r\n");
      out.write("    -webkit-box-orient: vertical;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 카드 하단 사용자 텍스트 스타일 */\r\n");
      out.write(".card-user-text {\r\n");
      out.write("    font-size: 0.85em;\r\n");
      out.write("    color: #888;\r\n");
      out.write("    font-style: italic;\r\n");
      out.write("    margin-top: 10px;\r\n");
      out.write("    padding-top: 10px;\r\n");
      out.write("    border-top: 1px solid #eee;\r\n");
      out.write("    line-height: 1.3;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".grid {\r\n");
      out.write("    display: grid;\r\n");
      out.write("    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n");
      out.write("    gap: 20px;\r\n");
      out.write("    justify-content: center;\r\n");
      out.write("    padding: 20px 0;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<header>\r\n");
      out.write("    <div id=\"logo\">\r\n");
      out.write("        <a href=\"");
      out.print( request.getContextPath() );
      out.write("/main.jsp\">\r\n");
      out.write("            <img src=\"");
      out.print( request.getContextPath() );
      out.write("/img/logo.png\" alt=\"로고\">\r\n");
      out.write("        </a>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"search-form\">\r\n");
      out.write("        <input type=\"text\" id=\"search-box\" placeholder=\"검색어를 입력하세요...\" class=\"search-input\" />\r\n");
      out.write("        <button type=\"button\" id=\"search-btn\" class=\"search-button\">검색</button>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div id=\"user-buttons\">\r\n");
      out.write("        ");
      out.write("\r\n");
      out.write("        ");
 if (session.getAttribute("loggedInUser") == null) { 
      out.write("\r\n");
      out.write("            <button id=\"join-btn\" onclick=\"location.href='");
      out.print( request.getContextPath() );
      out.write("/register.jsp'\">회원가입</button>\r\n");
      out.write("            <button id=\"login-btn\" onclick=\"location.href='");
      out.print( request.getContextPath() );
      out.write("/login.jsp'\">로그인</button>\r\n");
      out.write("        ");
 } else { 
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
 User tempUser = (User) session.getAttribute("loggedInUser"); 
      out.write("\r\n");
      out.write("            <span class=\"welcome-message\">환영합니다, ");
      out.print( tempUser.getNickname() );
      out.write("님!</span>\r\n");
      out.write("            <a href=\"");
      out.print( request.getContextPath() );
      out.write("/mypage.jsp\" class=\"header-action-btn\">마이페이지</a>\r\n");
      out.write("            <a href=\"");
      out.print( request.getContextPath() );
      out.write("/doLogout\" class=\"header-action-btn\" onclick=\"return confirm('정말 로그아웃 하시겠습니까?');\">로그아웃</a>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</header>");
      out.write("\r\n");
      out.write("	<nav>\r\n");
      out.write("		<a href=\"");
      out.print(contextPath);
      out.write("/aiRecommend.jsp\">(AI) 책 추천</a> <a\r\n");
      out.write("			href=\"");
      out.print(contextPath);
      out.write("/reviewList\">리뷰</a> <a\r\n");
      out.write("			href=\"");
      out.print(contextPath);
      out.write("/playlistmain.jsp\">플레이리스트</a> <a\r\n");
      out.write("			href=\"");
      out.print(contextPath);
      out.write("/celebList\">셀럽추천</a> <a\r\n");
      out.write("			href=\"");
      out.print(contextPath);
      out.write("/mypage.jsp\">마이페이지</a>\r\n");
      out.write("	</nav>\r\n");
      out.write("	\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<div class=\"action-buttons\">\r\n");
      out.write("			<a href=\"celebForm.jsp\" class=\"create-btn\">작성하기</a>\r\n");
      out.write("			<button id=\"deleteSelectedBtn\" class=\"delete-selected-btn\">선택 삭제</button>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("		<div class=\"grid\" id=\"cards-grid\">\r\n");
      out.write("			<script>\r\n");
      out.write("				// 전역변수로 contextPath 정의 (JSP EL 값을 JS에서 사용)\r\n");
      out.write("				const contextPath = \"");
      out.print( request.getContextPath() );
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("				// ⭐ 여기서 카드 데이터를 수정하세요! ⭐\r\n");
      out.write("				// userText 필드에 원하는 텍스트를 입력하면 카드 하단에 표시됩니다.\r\n");
      out.write("				// linkUrl 필드에 이동할 링크를 설정합니다.\r\n");
      out.write("				const customCards = [\r\n");
      out.write("					{\r\n");
      out.write("						id: 1,\r\n");
      out.write("						imageUrl: \"img/시.jpg\",\r\n");
      out.write("						title: \"시/소설\",\r\n");
      out.write("						description: \"\",\r\n");
      out.write("						userText:\"짧은 시 한 줄, 마음속 작은 쉼표를 찾아보세요.\",\r\n");
      out.write("						linkUrl: \"playpoetry.jsp\"\r\n");
      out.write("					},\r\n");
      out.write("					{\r\n");
      out.write("						id: 2,\r\n");
      out.write("						imageUrl: \"img/에세이.jpg\",\r\n");
      out.write("						title: \"에세이\",\r\n");
      out.write("						description: \"\",\r\n");
      out.write("						userText: \"일상 속 작은 깨달음. 따뜻한 위로와 성찰을 나눕니다.\",\r\n");
      out.write("						linkUrl: \"playessay.jsp\"\r\n");
      out.write("					},\r\n");
      out.write("					{\r\n");
      out.write("						id: 3,\r\n");
      out.write("						imageUrl: \"img/SF.jpg\",\r\n");
      out.write("						title: \"SF/판타지\",\r\n");
      out.write("						description: \"\",\r\n");
      out.write("						userText: \"상상력의 한계에 도전하는 압도적인 스케일.\",\r\n");
      out.write("						linkUrl: \"playSF.jsp\"\r\n");
      out.write("					},\r\n");
      out.write("					{\r\n");
      out.write("						id: 4,\r\n");
      out.write("						imageUrl: \"img/추리.jpg\",\r\n");
      out.write("						title: \"미스테리/추리\",\r\n");
      out.write("						description: \"\",\r\n");
      out.write("						userText: \"밤을 새우게 할 압도적 몰입감.\",\r\n");
      out.write("						linkUrl: \"playmystery.jsp\"\r\n");
      out.write("					},\r\n");
      out.write("					{\r\n");
      out.write("						id: 5,\r\n");
      out.write("						imageUrl: \"img/역사.jpg\",\r\n");
      out.write("						title: \"인문/역사\",\r\n");
      out.write("						description: \"\",\r\n");
      out.write("						userText: \"오늘을 만든 어제. 깊이 있는 통찰로.\",\r\n");
      out.write("						linkUrl: \"playhistory.jsp\"\r\n");
      out.write("					},\r\n");
      out.write("					{\r\n");
      out.write("						id: 6,\r\n");
      out.write("						imageUrl: \"img/철학.jpg\",\r\n");
      out.write("						title: \"철학\",\r\n");
      out.write("						description: \"\",\r\n");
      out.write("						userText: \"삶의 본질을 탐구하며. 생각의 깊이를 더해봅니다.\",\r\n");
      out.write("						linkUrl: \"playphilosophy.jsp\"\r\n");
      out.write("					},\r\n");
      out.write("					{\r\n");
      out.write("						id: 7,\r\n");
      out.write("						imageUrl: \"img/예술.jpg\",\r\n");
      out.write("						title: \"문화/예술\",\r\n");
      out.write("						description: \"\",\r\n");
      out.write("						userText: \"내면의 풍경을 그려내다.\",\r\n");
      out.write("						linkUrl: \"playart.jsp\"\r\n");
      out.write("					},\r\n");
      out.write("					{\r\n");
      out.write("						id: 8,\r\n");
      out.write("						imageUrl: \"img/건강.jpg\",\r\n");
      out.write("						title: \"건강/스포츠\",\r\n");
      out.write("						description: \"\",\r\n");
      out.write("						userText: \"더 나은 당신. 최적의 컨디션을 위한 선택.\",\r\n");
      out.write("						linkUrl: \"playfitness.jsp\"\r\n");
      out.write("					}\r\n");
      out.write("				];\r\n");
      out.write("			</script>\r\n");
      out.write("			\r\n");
      out.write("			");
      if (_jspx_meth_c_005fchoose_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<button id=\"topBtn\" title=\"맨 위로 이동\">\r\n");
      out.write("		<i class=\"fas fa-arrow-up\"></i>\r\n");
      out.write("	</button>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"grid\" id=\"cards-grid\">\r\n");
      out.write("    <!-- 서버 데이터 제거, JavaScript로 카드 생성 -->\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <footer>\r\n");
      out.write("         <div class=\"footer-container\">\r\n");
      out.write("            <div class=\"footer-links\">\r\n");
      out.write("                <a href=\"#\">회사소개</a>\r\n");
      out.write("                <a href=\"#\">이용약관</a>\r\n");
      out.write("                <a href=\"#\">개인정보처리방침</a>\r\n");
      out.write("                <a href=\"#\">고객센터</a>\r\n");
      out.write("            </div>\r\n");
      out.write("            <p>&copy; 2024 WithUs. All rights reserved.</p>\r\n");
      out.write("        </div>\r\n");
      out.write("    </footer>\r\n");
      out.write("<script>\r\n");
      out.write("let isNavigating = false;\r\n");
      out.write("\r\n");
      out.write("document.addEventListener(\"DOMContentLoaded\", () => {\r\n");
      out.write("    // 커스텀 카드 생성\r\n");
      out.write("    createCardsFromCustomData();\r\n");
      out.write("    \r\n");
      out.write("    // TOP 버튼 스크롤\r\n");
      out.write("    document.getElementById(\"topBtn\").addEventListener(\"click\", () => {\r\n");
      out.write("        window.scrollTo({ top: 0, behavior: 'smooth' });\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 카드 클릭 이벤트\r\n");
      out.write("    document.querySelector('.grid').addEventListener('click', async (event) => {\r\n");
      out.write("        const clickedCard = event.target.closest('.celeb-card-container');\r\n");
      out.write("        if (clickedCard && !isNavigating) {\r\n");
      out.write("            event.preventDefault();\r\n");
      out.write("            event.stopPropagation();\r\n");
      out.write("            \r\n");
      out.write("            const cardId = clickedCard.dataset.celebId;\r\n");
      out.write("            const cardData = customCards.find(card => card.id == cardId);\r\n");
      out.write("            \r\n");
      out.write("            if (cardData && cardData.linkUrl) {\r\n");
      out.write("                isNavigating = true;\r\n");
      out.write("                await fadeOutAllCardsWithNavigation(cardData.linkUrl);\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 커스텀 데이터로 카드 생성\r\n");
      out.write("function createCardsFromCustomData() {\r\n");
      out.write("    const grid = document.getElementById('cards-grid');\r\n");
      out.write("    customCards.forEach(data => {\r\n");
      out.write("        let finalImageUrl = data.imageUrl;\r\n");
      out.write("        if (!finalImageUrl.startsWith(\"http://\") && !finalImageUrl.startsWith(\"https://\")) {\r\n");
      out.write("            finalImageUrl = contextPath + \"/\" + finalImageUrl;\r\n");
      out.write("        }\r\n");
      out.write("        const card = createCardElement(data.id, finalImageUrl, data.title, data.description, data.userText, data.linkUrl);\r\n");
      out.write("        grid.appendChild(card);\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 카드 엘리먼트 생성\r\n");
      out.write("function createCardElement(id, imageUrl, title, desc, userText = '', linkUrl = '') {\r\n");
      out.write("    const cardContainer = document.createElement('div');\r\n");
      out.write("    cardContainer.className = 'celeb-card-container';\r\n");
      out.write("    cardContainer.dataset.celebId = id;\r\n");
      out.write("    if (linkUrl) {\r\n");
      out.write("        cardContainer.dataset.linkUrl = linkUrl;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    const userTextHtml = userText ? '<div class=\"card-user-text\">' + userText + '</div>' : '';\r\n");
      out.write("\r\n");
      out.write("    cardContainer.innerHTML = \r\n");
      out.write("        '<i class=\"fas fa-bookmark bookmark-icon\"></i>' +\r\n");
      out.write("        '<div class=\"card-actions\">' +\r\n");
      out.write("            '<button class=\"delete-btn\">삭제</button>' + \r\n");
      out.write("        '</div>' +\r\n");
      out.write("        '<div class=\"card\">' +\r\n");
      out.write("            '<img src=\"' + imageUrl + '\" alt=\"' + title + ' 이미지\" class=\"loaded\" />' +\r\n");
      out.write("            '<div class=\"card-content\">' +\r\n");
      out.write("                '<div class=\"card-title\">' + title + '</div>' +\r\n");
      out.write("                '<div class=\"card-desc\">' + desc + '</div>' +\r\n");
      out.write("                userTextHtml +\r\n");
      out.write("            '</div>' +\r\n");
      out.write("        '</div>';\r\n");
      out.write("\r\n");
      out.write("    return cardContainer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 모든 카드 페이드아웃 후 네비게이션\r\n");
      out.write("async function fadeOutAllCardsWithNavigation(targetUrl) {\r\n");
      out.write("    const cards = document.querySelectorAll('.celeb-card-container');\r\n");
      out.write("    \r\n");
      out.write("    const fadePromises = [];\r\n");
      out.write("    cards.forEach((card, index) => {\r\n");
      out.write("        const promise = new Promise((resolve) => {\r\n");
      out.write("            setTimeout(() => {\r\n");
      out.write("                card.classList.add('fade-out');\r\n");
      out.write("                \r\n");
      out.write("                setTimeout(() => {\r\n");
      out.write("                    card.classList.add('fade-out-shrink');\r\n");
      out.write("                    \r\n");
      out.write("                    setTimeout(() => {\r\n");
      out.write("                        card.remove();\r\n");
      out.write("                        resolve();\r\n");
      out.write("                    }, 300);\r\n");
      out.write("                }, 1200);\r\n");
      out.write("            }, index * 200);\r\n");
      out.write("        });\r\n");
      out.write("        fadePromises.push(promise);\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    await Promise.all(fadePromises);\r\n");
      out.write("    window.location.href = targetUrl;\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fchoose_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:choose
    org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
    boolean _jspx_th_c_005fchoose_005f0_reused = false;
    try {
      _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f0.setParent(null);
      int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
      if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("				");
          if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("				");
          if (_jspx_meth_c_005fotherwise_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("			");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
      _jspx_th_c_005fchoose_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fchoose_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fchoose_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fwhen_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    boolean _jspx_th_c_005fwhen_005f0_reused = false;
    try {
      _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      // /playlistmain.jsp(276,4) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty celebList}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
      if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("					");
          if (_jspx_meth_c_005fforEach_005f0(_jspx_th_c_005fwhen_005f0, _jspx_page_context))
            return true;
          out.write("\r\n");
          out.write("				");
          int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
      _jspx_th_c_005fwhen_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fwhen_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fwhen_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fwhen_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fwhen_005f0);
      // /playlistmain.jsp(277,5) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("celeb");
      // /playlistmain.jsp(277,5) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/playlistmain.jsp(277,5) '${celebList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${celebList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("		                <div class=\"celeb-card-container\" data-celeb-id=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${celeb.celebRecId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"> \r\n");
            out.write("		                    <i class=\"fas fa-bookmark bookmark-icon\"></i>\r\n");
            out.write("		                    \r\n");
            out.write("		                    <div class=\"card-actions\">\r\n");
            out.write("		                        <button class=\"delete-btn\">삭제</button> \r\n");
            out.write("		                    </div>\r\n");
            out.write("		                    \r\n");
            out.write("		                    <div class=\"card\">\r\n");
            out.write("		                        <img src=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('/');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${celeb.celebImageUrl}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" alt=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${celeb.celebName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(" 이미지\" class=\"loaded\" />\r\n");
            out.write("		                        <div class=\"card-content\">\r\n");
            out.write("		                            <div class=\"card-title\">");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${celeb.celebName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</div>\r\n");
            out.write("		                            <div class=\"card-desc\">");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${celeb.celebDescription}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</div>\r\n");
            out.write("		                        </div>\r\n");
            out.write("		                    </div>\r\n");
            out.write("		                </div>\r\n");
            out.write("					");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fotherwise_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:otherwise
    org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f0 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
    boolean _jspx_th_c_005fotherwise_005f0_reused = false;
    try {
      _jspx_th_c_005fotherwise_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fotherwise_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
      int _jspx_eval_c_005fotherwise_005f0 = _jspx_th_c_005fotherwise_005f0.doStartTag();
      if (_jspx_eval_c_005fotherwise_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("					");
          int evalDoAfterBody = _jspx_th_c_005fotherwise_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fotherwise_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f0);
      _jspx_th_c_005fotherwise_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fotherwise_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fotherwise_005f0_reused);
    }
    return false;
  }
}
