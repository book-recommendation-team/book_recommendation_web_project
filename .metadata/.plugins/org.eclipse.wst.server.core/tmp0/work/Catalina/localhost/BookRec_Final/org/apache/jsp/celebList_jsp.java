/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2025-07-09 06:38:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import model.User;
import model.User;

public final class celebList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1751616556000L));
    _jspx_dependants.put("jar:file:/C:/teamproject_0708/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/BookRec_Final/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
    _jspx_dependants.put("/css/main_css.jsp", Long.valueOf(1751947096000L));
    _jspx_dependants.put("/header.jsp", Long.valueOf(1751950996000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("model.User");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');

User loggedInUser = (User) session.getAttribute("loggedInUser");
String contextPath = request.getContextPath();

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<link rel=\"stylesheet\"\n");
      out.write("	href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\" />\n");
      out.write("<link rel=\"stylesheet\" href=\"./css/celebList.css\" />\n");
      out.write('\n');
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<style>\n");
      out.write("  /* 기본 스타일 (기존 유지) */\n");
      out.write("body {\n");
      out.write("    font-family: 'Arial', sans-serif;\n");
      out.write("    margin: 0;\n");
      out.write("    padding: 0;\n");
      out.write("    background-color: #fff;\n");
      out.write("}\n");
      out.write("\n");
      out.write("header {\n");
      out.write("    display: flex;\n");
      out.write("    justify-content: space-between;\n");
      out.write("    align-items: center;\n");
      out.write("    background-color: #eff7e8;\n");
      out.write("    padding: 0px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#logo img {\n");
      out.write("    width: 200px;\n");
      out.write("    height: auto;\n");
      out.write("    margin-left: 150px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#logo a img {\n");
      out.write("    cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".search-form { /* CSS 클래스 이름 수정 */\n");
      out.write("  display: flex;\n");
      out.write("  justify-content: center;\n");
      out.write("  align-items: center;\n");
      out.write("  gap: 10px;\n");
      out.write("  margin: 10px 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#search-box {\n");
      out.write("  padding: 10px;\n");
      out.write("  width: 400px;\n");
      out.write("  font-size: 16px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#search-btn {\n");
      out.write("  padding: 10px 16px;\n");
      out.write("  background-color: #446b3c;\n");
      out.write("  color: white;\n");
      out.write("  border: none;\n");
      out.write("  font-size: 16px;\n");
      out.write("  border-radius: 4px;\n");
      out.write("  cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("#search-btn:hover {\n");
      out.write("    background-color: #cce0b8;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* ======================================================== */\n");
      out.write("/* [수정된 부분 시작] 기존 버튼 스타일을 아래 코드로 대체합니다. */\n");
      out.write("/* ======================================================== */\n");
      out.write("\n");
      out.write("/* 회원가입, 로그인 등 기본 버튼 스타일 */\n");
      out.write("#user-buttons button {\n");
      out.write("    display: inline-block;\n");
      out.write("    width: 110px;\n");
      out.write("    height: 42px;\n");
      out.write("    line-height: 42px;\n");
      out.write("    text-align: center;\n");
      out.write("    vertical-align: middle;\n");
      out.write("    white-space: nowrap;\n");
      out.write("    \n");
      out.write("    background-color: #e6f0d7;\n");
      out.write("    color: #446b3c;\n");
      out.write("    border: 1px solid #c0dab0;\n");
      out.write("    border-radius: 4px;\n");
      out.write("    \n");
      out.write("    font-weight: bold;\n");
      out.write("    font-size: 14px;\n");
      out.write("    cursor: pointer;\n");
      out.write("    box-sizing: border-box;\n");
      out.write("    transition: background-color 0.2s;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 마이페이지, 로그아웃 링크를 버튼처럼 보이게 하는 스타일 */\n");
      out.write(".header-action-btn {\n");
      out.write("    display: inline-block;\n");
      out.write("    width: 110px;\n");
      out.write("    height: 42px;\n");
      out.write("    line-height: 42px;\n");
      out.write("    text-align: center;\n");
      out.write("    vertical-align: middle;\n");
      out.write("    white-space: nowrap;\n");
      out.write("    \n");
      out.write("    background-color: #e6f0d7;\n");
      out.write("    color: #446b3c;\n");
      out.write("    border: 1px solid #c0dab0;\n");
      out.write("    border-radius: 4px;\n");
      out.write("    \n");
      out.write("    font-weight: bold;\n");
      out.write("    font-size: 14px;\n");
      out.write("    text-decoration: none; /* a 태그 밑줄 제거 */\n");
      out.write("    cursor: pointer;\n");
      out.write("    box-sizing: border-box;\n");
      out.write("    transition: background-color 0.2s;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 모든 버튼에 동일한 hover 효과 적용 */\n");
      out.write("#user-buttons button:hover,\n");
      out.write(".header-action-btn:hover {\n");
      out.write("    background-color: #d0e6c5;\n");
      out.write("    border-color: #a9c7a7;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 환영 메시지 텍스트 세로 정렬 */\n");
      out.write(".welcome-message {\n");
      out.write("    vertical-align: middle;\n");
      out.write("    margin-right: 10px;\n");
      out.write("    font-weight: bold;\n");
      out.write("    color: #446b3c;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* ======================================================== */\n");
      out.write("/* [수정된 부분 끝]                                        */\n");
      out.write("/* ======================================================== */\n");
      out.write("\n");
      out.write("nav {\n");
      out.write("    background-color: #e6f0d7;\n");
      out.write("    text-align: center;\n");
      out.write("    padding: 15px 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write("nav a {\n");
      out.write("    text-decoration: none;\n");
      out.write("    margin: 0 40px;\n");
      out.write("    color: #000;\n");
      out.write("    font-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write("nav a:hover {\n");
      out.write("    text-decoration: underline;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#user-buttons {\n");
      out.write("    display: flex;\n");
      out.write("    align-items: center; /* 버튼과 텍스트 세로 정렬을 위해 추가 */\n");
      out.write("    gap: 10px;\n");
      out.write("    margin-right: 150px;\n");
      out.write("} \n");
      out.write(".banner {\n");
      out.write("    position: relative;\n");
      out.write("    width: 100%;\n");
      out.write("    height: 650px;\n");
      out.write("    overflow: hidden;\n");
      out.write("      background-color: transparent;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".banner img {\n");
      out.write("    position: absolute;\n");
      out.write("    top: 0;\n");
      out.write("    left: 0;\n");
      out.write("    width: 100%;\n");
      out.write("    height: 100%;\n");
      out.write("    object-fit: cover;\n");
      out.write("    object-position: center center;\n");
      out.write("    z-index: 1;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".banner-controls {\n");
      out.write("    position: absolute;\n");
      out.write("    bottom: 10px;\n");
      out.write("    right: 10px;\n");
      out.write("    z-index: 3;\n");
      out.write("    display: flex;\n");
      out.write("    gap: 6px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".banner-controls button {\n");
      out.write("    background-color: rgba(255, 193, 7, 0.9);\n");
      out.write("    border: none;\n");
      out.write("    padding: 6px 8px;\n");
      out.write("    font-size: 14px;\n");
      out.write("    border-radius: 5px;\n");
      out.write("    cursor: pointer;\n");
      out.write("    color: #000;\n");
      out.write("    transition: background-color 0.3s ease;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".banner-controls button:hover {\n");
      out.write("    background-color: rgba(255, 160, 0, 0.95);\n");
      out.write("}\n");
      out.write("\n");
      out.write(".section-title {\n");
      out.write("    background-color: #e6f0d7;\n");
      out.write("    display: flex;\n");
      out.write("    justify-content: center;\n");
      out.write("    flex-wrap: wrap;\n");
      out.write("    gap: 34px;\n");
      out.write("    padding: 18px 0;\n");
      out.write("     width: 100%;        /* ✅ 추가 */\n");
      out.write("    margin: 8px 0;      /* ✅ 가운데 정렬 제거 */\n");
      out.write("}\n");
      out.write("\n");
      out.write(".section-title a {\n");
      out.write("    text-decoration: none;\n");
      out.write("    margin: 0 20px;\n");
      out.write("    color: #000;\n");
      out.write("    font-weight: bold;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".section-title a:hover {\n");
      out.write("    text-decoration: underline;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".main_list {\n");
      out.write("    padding: 20px;\n");
      out.write("    text-align: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write(" .tag-list {\n");
      out.write("    display: flex;\n");
      out.write("    justify-content: center;\n");
      out.write("    flex-wrap: wrap;\n");
      out.write("    gap: 12px;\n");
      out.write("    margin: 20px 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".tag-button {\n");
      out.write("    background-color: #e6f0d7; /* 기본 연그린 */\n");
      out.write("    border: 1px solid transparent;\n");
      out.write("    padding: 8px 16px;\n");
      out.write("    border-radius: 20px;\n");
      out.write("    font-size: 14px;\n");
      out.write("    color: #446b3c; /* 그린 계열 텍스트 */\n");
      out.write("    cursor: pointer;\n");
      out.write("    font-weight: 600;\n");
      out.write("    transition: background-color 0.3s, color 0.3s, border 0.3s;\n");
      out.write("    outline: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".tag-button:hover {\n");
      out.write("    background-color: #d0e6c5;             /* hover 시 약간 더 진한 그린 */\n");
      out.write("    color: #2e4f25;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".tag-button.active {\n");
      out.write("    background-color: #c0dab0;             /* 클릭됐을 때 조금 더 강조 */\n");
      out.write("    border: 1px solid #8cb78a;             /* 테두리도 자연스러운 초록 */\n");
      out.write("    color: #2e4f25;                        /* 글자도 어울리는 진한 그린 */\n");
      out.write("}\n");
      out.write("\n");
      out.write(".tag-button:focus {\n");
      out.write("    outline: none;\n");
      out.write("    box-shadow: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 책 슬라이더 스타일 */\n");
      out.write(".book-carousel {\n");
      out.write("    position: relative;\n");
      out.write("    max-width: 1000px;\n");
      out.write("    margin: 0 auto 40px auto;\n");
      out.write("    overflow: hidden;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".carousel-window {\n");
      out.write("    width: 1000px;\n");
      out.write("    overflow: hidden;\n");
      out.write("    margin: 0 auto;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".carousel-track {\n");
      out.write("    display: flex;\n");
      out.write("    transition: transform 0.5s ease;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 이전/다음 버튼 - 위치 고정, 색상 조정 */\n");
      out.write(".carousel-btn {\n");
      out.write("    position: absolute;\n");
      out.write("    top: 50%;\n");
      out.write("    transform: translateY(-50%);\n");
      out.write("    font-size: 26px;\n");
      out.write("    background-color: #f3f8ef;\n");
      out.write("    border: none;\n");
      out.write("    color: #444;\n");
      out.write("    cursor: pointer;\n");
      out.write("    padding: 8px 12px;\n");
      out.write("    border-radius: 50%;\n");
      out.write("    z-index: 2;\n");
      out.write("    display: flex;\n");
      out.write("    align-items: center;\n");
      out.write("    justify-content: center;\n");
      out.write("    transition: background-color 0.3s, color 0.3s;\n");
      out.write("    user-select: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".carousel-btn:hover {\n");
      out.write("    background-color: #c8dfb5;\n");
      out.write("    color: #000;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".carousel-btn.prev {\n");
      out.write("    left: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".carousel-btn.next {\n");
      out.write("    right: 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".book-item {\n");
      out.write("    flex: 0 0 25%;\n");
      out.write("    text-align: center;\n");
      out.write("    padding: 10px;\n");
      out.write("    box-sizing: border-box;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".book-item img {\n");
      out.write("    width: 180px;\n");
      out.write("    height: 260px;\n");
      out.write("    object-fit: cover;\n");
      out.write("    border-radius: 6px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".book-info {\n");
      out.write("    margin-top: 8px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".book-title {\n");
      out.write("    font-size: 14px;\n");
      out.write("    font-weight: bold;\n");
      out.write("    margin-top: 10px;\n");
      out.write("    color: #444;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".book-author {\n");
      out.write("    font-size: 12px;\n");
      out.write("    color: #666;\n");
      out.write("}\n");
      out.write("\n");
      out.write("footer {\n");
      out.write("    background-color: #eff7e8;\n");
      out.write("    color: #333;\n");
      out.write("    padding: 20px 0;\n");
      out.write("    text-align: center;\n");
      out.write("    font-size: 14px;\n");
      out.write("    border-top: 1px solid #ccc;\n");
      out.write("    margin-top: 60px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".footer-container {\n");
      out.write("    max-width: 1000px;\n");
      out.write("    margin: 0 auto;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".footer-links a {\n");
      out.write("    color: #333;\n");
      out.write("    text-decoration: none;\n");
      out.write("    margin: 0 8px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".footer-links a:hover {\n");
      out.write("    text-decoration: underline;\n");
      out.write("}\n");
      out.write("\n");
      out.write(" /* 이전/다음 버튼 스타일 */\n");
      out.write("#carousel-prev-btn, #carousel-next-btn {\n");
      out.write("    font-size: 18px;\n");
      out.write("    padding: 5px 12px;\n");
      out.write("    margin: 10px 5px 20px 5px;\n");
      out.write("    cursor: pointer;\n");
      out.write("    border: 1px solid #446b3c;\n");
      out.write("    background: white;\n");
      out.write("    color: #446b3c;\n");
      out.write("    border-radius: 4px;\n");
      out.write("}\n");
      out.write("#carousel-prev-btn:hover, #carousel-next-btn:hover {\n");
      out.write("    background-color: #446b3c;\n");
      out.write("    color: white;\n");
      out.write("}\n");
      out.write("#scrollToTopBtn {\n");
      out.write("  position: fixed;\n");
      out.write("  bottom: 150px;\n");
      out.write("  right: 40px;\n");
      out.write("  width: 66px; /* 이미지와 딱 맞게 약간 키움 */\n");
      out.write("  height: 66px;\n");
      out.write("  background-color: transparent;\n");
      out.write("  border: none;\n");
      out.write("  border-radius: 0;\n");
      out.write("  transform: rotate(45deg);\n");
      out.write("  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15); /* 그림자 더 작고 약하게 */\n");
      out.write("  cursor: pointer;\n");
      out.write("  display: flex;\n");
      out.write("  justify-content: center;\n");
      out.write("  align-items: center;\n");
      out.write("  z-index: 999;\n");
      out.write("  transition: all 0.3s ease;\n");
      out.write("  backdrop-filter: blur(10px);\n");
      out.write("  padding: 0;\n");
      out.write("  margin-top: 0px; /* margin-top 제거 또는 0으로 */\n");
      out.write("}\n");
      out.write("\n");
      out.write("#scrollToTopBtn img {\n");
      out.write("  width: 100%;\n");
      out.write("  height: 100%;\n");
      out.write("  object-fit: contain;\n");
      out.write("  transform: rotate(-45deg);\n");
      out.write("  display: block;\n");
      out.write("  transition: transform 0.3s ease;\n");
      out.write("  position: relative;\n");
      out.write("  top: 0;\n");
      out.write("  left: 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#scrollToTopBtn:hover {\n");
      out.write("  transform: rotate(45deg) translateY(2px); /* 움직임도 줄임 */\n");
      out.write("  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.2); /* 호버시 그림자도 작게 */\n");
      out.write("}\n");
      out.write("\n");
      out.write("#scrollToTopBtn:hover img {\n");
      out.write("  transform: scale(1.05) rotate(-45deg);\n");
      out.write("}\n");
      out.write("\n");
      out.write("</style>\n");
      out.write('\n');
      out.write("\n");
      out.write("<link rel=\"icon\" href=\"img/icon2.png\" type=\"image/x-icon\">\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>셀럽 추천 리스트</title>\n");
      out.write("<style>\n");
      out.write("/* 기존 celebList.css에 정의된 스타일이 여기에 복사되지 않도록 주의하세요. */\n");
      out.write("/* 아래 스타일은 celebList.css에 추가되거나, 해당 파일에서 정의되어 있어야 합니다. */\n");
      out.write("\n");
      out.write("/* === 새로 추가될 또는 확인해야 할 CSS === */\n");
      out.write(".action-buttons {\n");
      out.write("	display: flex;\n");
      out.write("	justify-content: flex-end;\n");
      out.write("	gap: 10px;\n");
      out.write("	margin-bottom: 20px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".action-buttons button, .action-buttons a {\n");
      out.write("	padding: 10px 16px;\n");
      out.write("	background-color: #e6f0d7;\n");
      out.write("	color: black;\n");
      out.write("	text-decoration: none;\n");
      out.write("	border: none;\n");
      out.write("	border-radius: 8px;\n");
      out.write("	cursor: pointer;\n");
      out.write("	font-weight: bold;\n");
      out.write("	transition: background-color 0.2s ease;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".action-buttons button:hover, .action-buttons a:hover {\n");
      out.write("	background-color: #cce0b8;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 개별 카드 내 삭제 버튼 스타일 */\n");
      out.write(".card-actions {\n");
      out.write("	position: absolute; /* .celeb-card-container 내에서 절대 위치 */\n");
      out.write("	top: 10px;\n");
      out.write("	right: 10px;\n");
      out.write("	z-index: 10; /* 다른 요소 위에 표시 */\n");
      out.write("	/* ⭐ 기본적으로 숨김 ⭐ */\n");
      out.write("	opacity: 0;\n");
      out.write("	visibility: hidden;\n");
      out.write("	transition: opacity 0.3s ease, visibility 0.3s ease;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".card-actions .delete-btn {\n");
      out.write("	background-color: rgba(255, 0, 0, 0.7); /* 빨간색 배경 */\n");
      out.write("	color: white;\n");
      out.write("	border: none;\n");
      out.write("	border-radius: 5px;\n");
      out.write("	padding: 5px 8px;\n");
      out.write("	font-size: 0.8em;\n");
      out.write("	cursor: pointer;\n");
      out.write("	transition: background-color 0.2s ease;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".card-actions .delete-btn:hover {\n");
      out.write("	background-color: rgba(255, 0, 0, 0.9);\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* ⭐ '선택 삭제' 모드일 때 개별 삭제 버튼 표시 ⭐ */\n");
      out.write("body.delete-mode-active .card-actions {\n");
      out.write("	opacity: 1;\n");
      out.write("	visibility: visible;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* --- 이미지/카드 크기 문제 해결을 위한 CSS (이전에 제안했던 부분, 필요하다면 celebList.css에 반영) --- */\n");
      out.write(".celeb-card-container { /* 각 셀럽 카드를 감싸는 div (position:relative를 가짐) */\n");
      out.write("	position: relative;\n");
      out.write("	background-color: #fcfcfc;\n");
      out.write("	border: 1px solid #e0e0e0;\n");
      out.write("	border-radius: 8px;\n");
      out.write("	overflow: hidden;\n");
      out.write("	box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\n");
      out.write("	display: flex;\n");
      out.write("	flex-direction: column;\n");
      out.write("	transition: transform 0.2s ease-in-out;\n");
      out.write("	/* cursor: pointer; */ /* 링크가 있으므로 컨테이너 커서는 제거 */\n");
      out.write("\n");
      out.write("	/* --- 이미지/카드 크기 문제 해결을 위함 (이전 제안) --- */\n");
      out.write("	/* height: 350px; */ /* 모든 카드의 높이를 고정 (필요 시 주석 해제하여 사용) */\n");
      out.write("}\n");
      out.write("\n");
      out.write(".celeb-card-container:hover {\n");
      out.write("	transform: translateY(-5px);\n");
      out.write("	box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 실제 링크가 되는 카드 부분 */\n");
      out.write(".card { /* 이전에는 a.card였는데 이제 div.celeb-card-container 안의 a.card가 됨 */\n");
      out.write("	text-decoration: none; /* 링크 밑줄 제거 */\n");
      out.write("	color: inherit; /* 텍스트 색상 상속 */\n");
      out.write("	display: flex; /* 내부 요소 세로 정렬 */\n");
      out.write("	flex-direction: column;\n");
      out.write("	flex-grow: 1; /* 남은 공간 채우기 */\n");
      out.write("	cursor: pointer; /* 링크에 포인터 커서 */\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 이미지 스타일 */\n");
      out.write(".card img {\n");
      out.write("	width: 100%; /* 부모 너비에 꽉 채움 */\n");
      out.write("	height: 280px; /* 이미지 높이 고정 (필요 시) */\n");
      out.write("	object-fit: cover; /* 이미지가 잘리더라도 비율 유지하며 컨테이너 채움 */\n");
      out.write("	border-bottom: 1px solid #eee;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 카드 내용 부분 */\n");
      out.write(".card-content {\n");
      out.write("	padding: 15px;\n");
      out.write("	text-align: left;\n");
      out.write("	flex-grow: 1;\n");
      out.write("	display: flex;\n");
      out.write("	flex-direction: column;\n");
      out.write("	justify-content: space-between;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".card-title {\n");
      out.write("	font-size: 1.2em;\n");
      out.write("	font-weight: bold;\n");
      out.write("	color: #444;\n");
      out.write("	margin-bottom: 8px;\n");
      out.write("	white-space: nowrap;\n");
      out.write("	overflow: hidden;\n");
      out.write("	text-overflow: ellipsis;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".card-desc {\n");
      out.write("	font-size: 0.9em;\n");
      out.write("	color: #666;\n");
      out.write("	line-height: 1.4;\n");
      out.write("	overflow: hidden;\n");
      out.write("	text-overflow: ellipsis;\n");
      out.write("	display: -webkit-box;\n");
      out.write("	-webkit-line-clamp: 3; /* 텍스트 3줄 초과 시 ... */\n");
      out.write("	-webkit-box-orient: vertical;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* 그리드 레이아웃 */\n");
      out.write(".grid {\n");
      out.write("	display: grid;\n");
      out.write("	grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n");
      out.write("	gap: 20px;\n");
      out.write("	justify-content: center;\n");
      out.write("	padding: 20px 0;\n");
      out.write("}\n");
      out.write(".bookmark-icon {\n");
      out.write("	position: absolute;\n");
      out.write("	top: 12px;\n");
      out.write("	right: 12px;\n");
      out.write("	font-size: 1.2rem;\n");
      out.write("	color: rgba(255, 255, 255, 0.5);\n");
      out.write("	padding: 6px;\n");
      out.write("	border-radius: 50%;\n");
      out.write("	transition: color 0.2s ease;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".bookmark-icon:hover {\n");
      out.write("	color: #fff;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<header>\r\n");
      out.write("    <div id=\"logo\">\r\n");
      out.write("        <a href=\"");
      out.print( request.getContextPath() );
      out.write("/main.jsp\">\r\n");
      out.write("            <img src=\"");
      out.print( request.getContextPath() );
      out.write("/img/logo.png\" alt=\"로고\">\r\n");
      out.write("        </a>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"search-form\">\r\n");
      out.write("        <input type=\"text\" id=\"search-box\" placeholder=\"검색어를 입력하세요...\" class=\"search-input\" />\r\n");
      out.write("        <button type=\"button\" id=\"search-btn\" class=\"search-button\">검색</button>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div id=\"user-buttons\">\r\n");
      out.write("        ");
      out.write("\r\n");
      out.write("        ");
 if (session.getAttribute("loggedInUser") == null) { 
      out.write("\r\n");
      out.write("            <button id=\"join-btn\" onclick=\"location.href='");
      out.print( request.getContextPath() );
      out.write("/register.jsp'\">회원가입</button>\r\n");
      out.write("            <button id=\"login-btn\" onclick=\"location.href='");
      out.print( request.getContextPath() );
      out.write("/login.jsp'\">로그인</button>\r\n");
      out.write("        ");
 } else { 
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
 User tempUser = (User) session.getAttribute("loggedInUser"); 
      out.write("\r\n");
      out.write("            <span class=\"welcome-message\">환영합니다, ");
      out.print( tempUser.getNickname() );
      out.write("님!</span>\r\n");
      out.write("            <a href=\"");
      out.print( request.getContextPath() );
      out.write("/mypage.jsp\" class=\"header-action-btn\">마이페이지</a>\r\n");
      out.write("            <a href=\"");
      out.print( request.getContextPath() );
      out.write("/doLogout\" class=\"header-action-btn\" onclick=\"return confirm('정말 로그아웃 하시겠습니까?');\">로그아웃</a>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</header>");
      out.write("\n");
      out.write("\n");
      out.write("	<nav>\n");
      out.write("		<a href=\"");
      out.print(contextPath);
      out.write("/aiRecommend.jsp\">(AI) 책 추천</a> <a\n");
      out.write("			href=\"");
      out.print(contextPath);
      out.write("/reviewList.jsp\">리뷰</a> <a\n");
      out.write("			href=\"");
      out.print(contextPath);
      out.write("/playlistmain.jsp\">플레이리스트</a> <a\n");
      out.write("			href=\"");
      out.print(contextPath);
      out.write("/celebList.jsp\">셀럽추천</a> <a\n");
      out.write("			href=\"");
      out.print(contextPath);
      out.write("/mypage.jsp\">마이페이지</a>\n");
      out.write("	</nav>\n");
      out.write("<div class=\"container\">\n");
      out.write("	<div class=\"action-buttons\">\n");
      out.write("		<a href=\"celebForm.jsp\" class=\"create-btn\">작성하기</a>\n");
      out.write("		<button id=\"deleteSelectedBtn\" class=\"delete-selected-btn\">선택 삭제</button>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("	<div class=\"grid\">\n");
      out.write("		<!-- 카드 1 -->\n");
      out.write("		<div class=\"celeb-card-container\" data-celeb-id=\"1\">\n");
      out.write("			<i class=\"fas fa-bookmark bookmark-icon\"></i>\n");
      out.write("			<div class=\"card-actions\"><button class=\"delete-btn\">삭제</button></div>\n");
      out.write("			<a class=\"card\" href=\"celebDetail1.jsp\">\n");
      out.write("				<img src=\"./img/celeb/parkchanwook_thum.jpg\" alt=\"Celeb1 이미지\" />\n");
      out.write("				<div class=\"card-content\">\n");
      out.write("					<div class=\"card-title\">박찬욱</div>\n");
      out.write("					<div class=\"card-desc\">\"깐느박\", \"미장센의 제왕\" 박찬욱 추천</div>\n");
      out.write("				</div>\n");
      out.write("			</a>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<!-- 카드 2 -->\n");
      out.write("		<div class=\"celeb-card-container\" data-celeb-id=\"2\">\n");
      out.write("			<i class=\"fas fa-bookmark bookmark-icon\"></i>\n");
      out.write("			<div class=\"card-actions\"><button class=\"delete-btn\">삭제</button></div>\n");
      out.write("			<a class=\"card\" href=\"celebDetail2.jsp\">\n");
      out.write("				<img src=\"./img/celeb/iu_thum.jpg\" alt=\"Celeb2 이미지\" />\n");
      out.write("				<div class=\"card-content\">\n");
      out.write("					<div class=\"card-title\">IU</div>\n");
      out.write("					<div class=\"card-desc\">아이유가 직접 읽고 팬들에게 추천한 책</div>\n");
      out.write("				</div>\n");
      out.write("			</a>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<!-- 카드 3 -->\n");
      out.write("		<div class=\"celeb-card-container\" data-celeb-id=\"3\">\n");
      out.write("			<i class=\"fas fa-bookmark bookmark-icon\"></i>\n");
      out.write("			<div class=\"card-actions\"><button class=\"delete-btn\">삭제</button></div>\n");
      out.write("			<a class=\"card\" href=\"celebDetail3.jsp\">\n");
      out.write("				<img src=\"./img/celeb/munsanghoon_thum.jpg\" alt=\"Celeb2 이미지\" />\n");
      out.write("				<div class=\"card-content\">\n");
      out.write("					<div class=\"card-title\">문상훈</div>\n");
      out.write("					<div class=\"card-desc\">빠더너스 문상훈이 사랑한 시집들</div>\n");
      out.write("				</div>\n");
      out.write("			</a>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<!-- 카드 4 -->\n");
      out.write("		<div class=\"celeb-card-container\" data-celeb-id=\"4\">\n");
      out.write("			<i class=\"fas fa-bookmark bookmark-icon\"></i>\n");
      out.write("			<div class=\"card-actions\"><button class=\"delete-btn\">삭제</button></div>\n");
      out.write("			<a class=\"card\" href=\"celebDetail4.jsp\">\n");
      out.write("				<img src=\"./img/celeb/faker_thum.jpg\" alt=\"Celeb2 이미지\" />\n");
      out.write("				<div class=\"card-content\">\n");
      out.write("					<div class=\"card-title\">페이커</div>\n");
      out.write("					<div class=\"card-desc\">페이커 대상혁이 추천하는 책</div>\n");
      out.write("				</div>\n");
      out.write("			</a>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<!-- 카드 5 -->\n");
      out.write("		<div class=\"celeb-card-container\" data-celeb-id=\"5\">\n");
      out.write("			<i class=\"fas fa-bookmark bookmark-icon\"></i>\n");
      out.write("			<div class=\"card-actions\"><button class=\"delete-btn\">삭제</button></div>\n");
      out.write("			<a class=\"card\" href=\"celebDetail5.jsp\">\n");
      out.write("				<img src=\"./img/celeb/parkjungmin_thum.jpg\" alt=\"Celeb2 이미지\" />\n");
      out.write("				<div class=\"card-content\">\n");
      out.write("					<div class=\"card-title\">박정민</div>\n");
      out.write("					<div class=\"card-desc\">출판사 '무제'대표 박정민의 책장</div>\n");
      out.write("				</div>\n");
      out.write("			</a>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<!-- 카드 6 -->\n");
      out.write("		<div class=\"celeb-card-container\" data-celeb-id=\"6\">\n");
      out.write("			<i class=\"fas fa-bookmark bookmark-icon\"></i>\n");
      out.write("			<div class=\"card-actions\"><button class=\"delete-btn\">삭제</button></div>\n");
      out.write("			<a class=\"card\" href=\"celebDetail6.jsp\">\n");
      out.write("				<img src=\"./img/celeb/rm_thum.jpg\" alt=\"Celeb2 이미지\" />\n");
      out.write("				<div class=\"card-content\">\n");
      out.write("					<div class=\"card-title\">RM</div>\n");
      out.write("					<div class=\"card-desc\">방탄소년단 RM이 추천하는 인생책</div>\n");
      out.write("				</div>\n");
      out.write("			</a>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<!-- 카드 7 -->\n");
      out.write("		<div class=\"celeb-card-container\" data-celeb-id=\"7\">\n");
      out.write("			<i class=\"fas fa-bookmark bookmark-icon\"></i>\n");
      out.write("			<div class=\"card-actions\"><button class=\"delete-btn\">삭제</button></div>\n");
      out.write("			<a class=\"card\" href=\"celebDetail7.jsp\">\n");
      out.write("				<img src=\"./img/celeb/hankang_thum.jpg\" alt=\"Celeb2 이미지\" />\n");
      out.write("				<div class=\"card-content\">\n");
      out.write("					<div class=\"card-title\">한강</div>\n");
      out.write("					<div class=\"card-desc\">노벨문학상 한강 작가의 책장</div>\n");
      out.write("				</div>\n");
      out.write("			</a>\n");
      out.write("		</div>\n");
      out.write("\n");
      out.write("		<!-- 카드 8 -->\n");
      out.write("		<div class=\"celeb-card-container\" data-celeb-id=\"8\">\n");
      out.write("			<i class=\"fas fa-bookmark bookmark-icon\"></i>\n");
      out.write("			<div class=\"card-actions\"><button class=\"delete-btn\">삭제</button></div>\n");
      out.write("			<a class=\"card\" href=\"celebDetail8.jsp\">\n");
      out.write("				<img src=\"./img/celeb/hongkyung_thum.jpg\" alt=\"Celeb2 이미지\" />\n");
      out.write("				<div class=\"card-content\">\n");
      out.write("					<div class=\"card-title\">홍경</div>\n");
      out.write("					<div class=\"card-desc\">홍경이 추천하는 책</div>\n");
      out.write("				</div>\n");
      out.write("			</a>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("	<div style=\"height: 1000px;\"></div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<button id=\"scrollToTopBtn\">\n");
      out.write("  <img src=\"img/up1.png\" alt=\"위로 가기 버튼\" />\n");
      out.write("</button>\n");
      out.write("	<script>\n");
      out.write("	document.addEventListener(\"DOMContentLoaded\", () => {\n");
      out.write("		document.getElementById(\"scrollToTopBtn\").addEventListener(\"click\", () => {\n");
      out.write("			window.scrollTo({ top: 0, behavior: 'smooth' });\n");
      out.write("		});\n");
      out.write("	});\n");
      out.write("\n");
      out.write("        // ⭐ 핵심: '.grid' 컨테이너에 이벤트 위임 리스너 등록 ⭐\n");
      out.write("        document.querySelector('.grid').addEventListener('click', async (event) => {\n");
      out.write("            // 클릭된 요소가 delete-btn 클래스를 가지고 있는지 확인\n");
      out.write("            if (event.target.classList.contains('delete-btn')) {\n");
      out.write("                event.preventDefault(); // 기본 동작 방지 (예: 부모 링크 이동)\n");
      out.write("                event.stopPropagation(); // 이벤트 버블링 방지 (부모 링크 클릭 방지)\n");
      out.write("\n");
      out.write("                // ⭐ 가장 가까운 .celeb-card-container 부모에서 celebRecId 가져오기 ⭐\n");
      out.write("                const celebCardContainer = event.target.closest('.celeb-card-container');\n");
      out.write("                const celebRecId = celebCardContainer ? celebCardContainer.dataset.celebId : null;\n");
      out.write("                \n");
      out.write("                // --- 디버깅을 위한 console.log ---\n");
      out.write("                console.log(\"------------------------------------------\");\n");
      out.write("                console.log(\"클릭 이벤트 발생:\", event);\n");
      out.write("                console.log(\"클릭된 요소 (event.target):\", event.target);\n");
      out.write("                console.log(\"클릭된 요소의 클래스 리스트:\", event.target.classList);\n");
      out.write("                console.log(\"closest('.celeb-card-container'):\", celebCardContainer);\n");
      out.write("                console.log(\"celebCardContainer.dataset.celebId:\", celebRecId);\n");
      out.write("                // --- 디버깅 코드 끝 ---\n");
      out.write("\n");
      out.write("                if (!celebRecId || celebRecId.trim() === '' || isNaN(parseInt(celebRecId))) {\n");
      out.write("                    alert('삭제할 셀럽 ID를 찾을 수 없거나 형식이 올바르지 않습니다.');\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                const isConfirmed = confirm('정말로 이 셀럽 추천 글을 삭제하시겠습니까?');\n");
      out.write("                if (!isConfirmed) {\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                try {\n");
      out.write("                    const deleteUrl = `celebList/` + celebRecId; // 문자열 결합 방식으로 변경\n");
      out.write("                    console.log(\"생성될 DELETE 요청 URL:\", deleteUrl); // 수정된 URL 출력\n");
      out.write("\n");
      out.write("                    const response = await fetch(deleteUrl, {\n");
      out.write("                        method: 'DELETE',\n");
      out.write("                        headers: {\n");
      out.write("                            'Content-Type': 'application/json'\n");
      out.write("                        }\n");
      out.write("                    });\n");
      out.write("\n");
      out.write("                    let apiResponse = {};\n");
      out.write("                    if (response.status !== 204) {\n");
      out.write("                        apiResponse = await response.json(); \n");
      out.write("                    }\n");
      out.write("                    \n");
      out.write("                    if (response.ok) {\n");
      out.write("                        alert(apiResponse.message || '셀럽 추천 글이 성공적으로 삭제되었습니다!');\n");
      out.write("                        window.location.reload(); // 페이지 새로고침하여 목록 업데이트\n");
      out.write("                    } else {\n");
      out.write("                        alert(apiResponse.message || `삭제 실패: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${response.statusText}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\n");
      out.write("                        console.error('API 응답 오류:', apiResponse);\n");
      out.write("                    }\n");
      out.write("                } catch (error) {\n");
      out.write("                    console.error('삭제 요청 중 오류 발생:', error);\n");
      out.write("                    alert('삭제 요청 중 통신 오류가 발생했습니다.');\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // ⭐ '선택 삭제' 버튼 클릭 시 개별 삭제 버튼을 토글하는 로직 ⭐\n");
      out.write("        document.getElementById('deleteSelectedBtn').addEventListener('click', () => {\n");
      out.write("            document.body.classList.toggle('delete-mode-active');\n");
      out.write("            // 선택 삭제 버튼 텍스트 변경 (선택 사항)\n");
      out.write("            const deleteBtn = document.getElementById('deleteSelectedBtn');\n");
      out.write("            if (document.body.classList.contains('delete-mode-active')) {\n");
      out.write("                deleteBtn.textContent = '삭제 모드 종료';\n");
      out.write("            } else {\n");
      out.write("                deleteBtn.textContent = '선택 삭제';\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("	});\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
