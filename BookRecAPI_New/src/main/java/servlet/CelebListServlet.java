package servlet;

import dao.CelebRecommendationsDao;
import dao.CelebRecommendedBooksDao;
import dto.ApiResponse;
import dto.CelebRecommendationResponse;
import service.CelebRecommendationService;
import service.CelebRecommendationException;

import com.google.gson.Gson;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@WebServlet("/celebList/*") // URL Îß§ÌïëÏùÑ '/celebList/*'Î°ú Ïú†ÏßÄ
public class CelebListServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    private CelebRecommendationService celebRecommendationService;
    private Gson gson;

    @Override
    public void init() throws ServletException {
        super.init();
        this.celebRecommendationService = new CelebRecommendationService(
            new CelebRecommendationsDao(),
            new CelebRecommendedBooksDao()
        );
        this.gson = new Gson();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html; charset=UTF-8");
        
        List<CelebRecommendationResponse> finalCelebList = new ArrayList<>(); 

        try {
            List<CelebRecommendationResponse> realCelebList = celebRecommendationService.getAllCelebRecommendations();
            
            if (realCelebList != null && !realCelebList.isEmpty()) {
                finalCelebList.addAll(realCelebList);
            }

            // ÌïòÎìúÏΩîÎî©Îêú ÌÖåÏä§Ìä∏Ïö© ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Îì§ÏùÑ ÏµúÏ¢Ö Î¶¨Ïä§Ìä∏Ïóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.
            finalCelebList.add(new CelebRecommendationResponse(
                1, "Î∞ïÏ∞¨Ïö±", "ÏòÅÌôîÍ∞êÎèÖ Î∞ïÏ∞¨Ïö±Ïù¥ Ï∂îÏ≤úÌïú Ï±Ö Î™®Ïùå", request.getContextPath() + "/img/Î∞ïÏ∞¨Ïö±.jpg", LocalDateTime.now()));
            finalCelebList.add(new CelebRecommendationResponse(
                2, "ÏïÑÏù¥Ïú†", "Í∞ÄÏàò ÏïÑÏù¥Ïú†Í∞Ä ÏùΩÍ≥† Í∞êÎèôÌïú Ï±Ö Î¶¨Ïä§Ìä∏", request.getContextPath() + "/img/ÏïÑÏù¥Ïú†.jpg", LocalDateTime.now()));
            finalCelebList.add(new CelebRecommendationResponse(
                3, "RM", "Î∞©ÌÉÑÏÜåÎÖÑÎã® RMÏùò Ï±ÖÏû• ÏÜç Ïù∏ÏÉù Ï±ÖÎì§", request.getContextPath() + "/img/RM.jpg", LocalDateTime.now()));
            finalCelebList.add(new CelebRecommendationResponse(
                4, "ÌéòÏù¥Ïª§", "ÌéòÏù¥Ïª§ ÎåÄÏÉÅÌòÅÏù¥ Ï∂îÏ≤úÌïòÎäî Ï±Ö", request.getContextPath() + "/img/ÌéòÏù¥Ïª§.jpg", LocalDateTime.now()));
            finalCelebList.add(new CelebRecommendationResponse(
                5, "ÌïúÍ∞ï", "ÎÖ∏Î≤®Î¨∏ÌïôÏÉÅ ÌïúÍ∞ïÏùò Ï±ÖÏû•", request.getContextPath() + "/img/ÌïúÍ∞ï.jpg", LocalDateTime.now()));
            finalCelebList.add(new CelebRecommendationResponse(
                6, "ÌôçÍ≤Ω", "ÌôçÍ≤ΩÏùò Ï∂îÏ≤ú ÎèÑÏÑú", request.getContextPath() + "/img/ÌôçÍ≤Ω.jpg", LocalDateTime.now()));
            finalCelebList.add(new CelebRecommendationResponse(
                7, "Î∞ïÏ†ïÎØº", "Î∞ïÏ†ïÎØºÏùò Ïù∏ÏÉùÏ±Ö", request.getContextPath() + "/img/Î∞ïÏ†ïÎØº.jpg", LocalDateTime.now()));
            finalCelebList.add(new CelebRecommendationResponse(
                8, "Î¨∏ÏÉÅÌõà", "Î¨∏ÏÉÅÌõàÏù¥ Ï∂îÏ≤úÌïòÎäî ÏãúÏßëÎì§", request.getContextPath() + "/img/Î¨∏ÏÉÅÌõà.jpg", LocalDateTime.now()));
            
            request.setAttribute("celebList", finalCelebList);

            RequestDispatcher dispatcher = request.getRequestDispatcher("/celebList.jsp");
            dispatcher.forward(request, response);

        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("errorMessage", "ÏÖÄÎüΩ Ï∂îÏ≤ú Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§ (DB Ïò§Î•ò).");
            RequestDispatcher dispatcher = request.getRequestDispatcher("/error.jsp");
            dispatcher.forward(request, response);
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("errorMessage", "Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
            RequestDispatcher dispatcher = request.getRequestDispatcher("/error.jsp");
            dispatcher.forward(request, response);
        }
    }

    // ÏÖÄÎüΩ Ï∂îÏ≤ú Í∏Ä ÏÇ≠Ï†ú (DELETE /celebList/{celebRecId})
    @Override
    protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("application/json; charset=UTF-8");
        PrintWriter out = response.getWriter();

        int celebRecId;
        try {
            // --- üö®üö®üö® ID ÌååÏã± Î°úÏßÅÏùÑ ÎçîÏö± Í≤¨Í≥†ÌïòÍ≤å ÏàòÏ†ïÌï©ÎãàÎã§. üö®üö®üö® ---
            // request.getPathInfo() ÎåÄÏã† request.getRequestURI()Î•º ÏÇ¨Ïö©ÌïòÏó¨ ÌååÏã±
            // Ïù¥Îäî request.getPathInfo()Í∞Ä ÏòàÏÉÅÎåÄÎ°ú ÎèôÏûëÌïòÏßÄ ÏïäÏùÑ ÎïåÎ•º ÎåÄÎπÑÌïú Îçî Í≤¨Í≥†Ìïú Î∞©Î≤ïÏûÖÎãàÎã§.
            String requestURI = request.getRequestURI(); // Ïòà: /BookRecAPI_New/celebList/6
            String contextPath = request.getContextPath(); // Ïòà: /BookRecAPI_New
            String servletPath = request.getServletPath(); // Ïòà: /celebList

            // /BookRecAPI_New/celebList/6 ÏóêÏÑú /BookRecAPI_New/celebListÎ•º Ï†úÍ±∞ -> /6
            String idPart = requestURI.substring(contextPath.length() + servletPath.length());
            
            if (idPart.startsWith("/")) {
                idPart = idPart.substring(1); // ÏÑ†Ìñâ Ïä¨ÎûòÏãú Ï†úÍ±∞ -> 6
            }
            
            if (idPart.isEmpty()) { // ID Î∂ÄÎ∂ÑÏù¥ ÎπÑÏñ¥ÏûàÏúºÎ©¥ Ïò§Î•ò
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                out.print(gson.toJson(ApiResponse.error("INVALID_PATH", "ÏÇ≠Ï†úÌï† ÏÖÄÎüΩ Ï∂îÏ≤ú IDÍ∞Ä URL Í≤ΩÎ°úÏóê Ìè¨Ìï®ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.")));
                return;
            }

            celebRecId = Integer.parseInt(idPart); // Ïà´ÏûêÎ°ú ÌååÏã± ÏãúÎèÑ
            // --- ID ÌååÏã± Î°úÏßÅ ÏàòÏ†ï ÎÅù ---

        } catch (NumberFormatException e) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            out.print(gson.toJson(ApiResponse.error("INVALID_ID_FORMAT", "Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÏÖÄÎüΩ Ï∂îÏ≤ú ID ÌòïÏãùÏûÖÎãàÎã§.")));
            e.printStackTrace();
            return;
        }

        try {
            boolean success = celebRecommendationService.deleteCelebRecommendation(celebRecId);

            if (success) {
                response.setStatus(HttpServletResponse.SC_NO_CONTENT); // 204 No Content (ÏÇ≠Ï†ú ÏÑ±Í≥µ, ÏùëÎãµ Î≥∏Î¨∏ ÏóÜÏùå)
            } else {
                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                out.print(gson.toJson(ApiResponse.error("DELETE_FAILED", "ÏÖÄÎüΩ Ï∂îÏ≤ú Í∏Ä ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.")));
            }
        } catch (SQLException e) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            out.print(gson.toJson(ApiResponse.error("DB_ERROR", "Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.")));
            e.printStackTrace();
        } catch (CelebRecommendationException e) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND); // NOT_FOUND -> 404
            out.print(gson.toJson(ApiResponse.error(e.getCode(), e.getMessage())));
            e.printStackTrace();
        } catch (Exception e) {
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            out.print(gson.toJson(ApiResponse.error("UNKNOWN_ERROR", "Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.")));
            e.printStackTrace();
        }
    }
}